plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle' version '[6.0.18,6.2)'
    id 'org.spongepowered.mixin' version '0.7.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

version = mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: mapping_channel, version: mapping_version

    copyIdeResources = true
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        configureEach {
            workingDirectory project.file("run/${it.name}")

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

sourceSets.main {
    ext.refMap = mixinRefmap
}

repositories {
    mavenCentral()
    mavenLocal()
    maven { url "https://cursemaven.com" }
}

dependencies {
    minecraft "net.neoforged:forge:${minecraft_version}-${neo_version}"

    runtimeOnly fg.deobf("curse.maven:the-one-probe-245211:4629624")

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

mixin {
    add sourceSets.main, mixinRefmap
    config mixinConfig
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description,
            pack_format_number     : pack_format_number,
            logo_file_name         : mod_id,
            issue_tracker_url      : issue_tracker_url
    ]
    inputs.properties replaceProperties
    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                'Specification-Title'        : mod_name,
                'Specification-Vendor'       : mod_authors,
                'Specification-Version'      : mod_version,
                'Implementation-Title'       : mod_name,
                'Implementation-Version'     : mod_version,
                'Implementation-Vendor'      : mod_authors,
                'Implementation-Timestamp'   : new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'TweakClass'                 : mixinTweaker,
                'MixinConfigs'               : mixinConfig,
                'FMLCorePluginContainsFMLMod': 'true'
        ])
    }
    finalizedBy 'reobfJar'
}

tasks.register('docJar', Jar) {
    build.dependsOn it
    from javadoc
    archiveClassifier = 'javadoc'
}

tasks.register('srcJar', Jar) {
    build.dependsOn it
    from sourceSets.main.allSource
    archiveClassifier = 'sources'
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
            artifact srcJar
            artifact docJar

            pom {
                name = project.name
                description = 'Modding Library'
                url = 'https://github.com/SnakerBone/SnakerLib'

                scm {
                    url = 'https://github.com/SnakerBone/SnakerLib'
                    connection = 'scm:git:git://github.com/SnakerBone/SnakerLib.git'
                    developerConnection = 'scm:git:git@github.com:SnakerBone/SnakerLib.git'
                }

                licenses {
                    license {
                        name = 'GPLv3'
                        url = 'https://www.gnu.org/licenses/gpl-3.0.txt'
                    }
                }
            }
        }
    }
    repositories {
        maven {
            def mavenPass = System.getenv("MVN_PASS")

            if (mavenPass == null) {
                printerr("No maven password found on the current system")
            } else {
                println("Using maven password: " + mavenPass)
            }

            url "https://s01.oss.sonatype.org/content/repositories/releases"

            credentials {
                username 'snaker'
                password mavenPass
            }
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.deprecation(false)
    options.warnings(false)
}

void printerr(Object value) {
    println("\u001B[31m")
    println(value)
    print("\u001B[0m")
}