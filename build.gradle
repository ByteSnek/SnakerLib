plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.45'
    id 'net.neoforged.gradle.mixin' version '7.0.45'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

version = minecraft_version + '-' + mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft.accessTransformers.file('src/main/resources/META-INF/accesstransformer.cfg')

runs {
    configureEach {
        systemProperty 'forge.logging.markers', 'REGISTRIES'
        systemProperty 'forge.logging.console.level', 'debug'
        systemProperty 'mixin.env.remapRefMap', 'true'
        systemProperty 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

        modSource project.sourceSets.main
    }

    client {
        systemProperty 'forge.enabledGameTestNamespaces', mod_id
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', mod_id
    }

    data {
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}


sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

sourceSets.main {
    ext.refMap = mixinRefmap
}

configurations {
    shadow
    implementation.extendsFrom shadow
}

repositories {
    mavenCentral()
    mavenLocal()
    maven { url "https://cursemaven.com" }
    maven { url 'https://jitpack.io' }
}

dependencies {
    implementation "net.neoforged:neoforge:${neo_version}"
    shadow "com.github.ByteSnek:Hiss:${hiss_version}"
}

mixin {
    configs = [mixinConfig]
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description,
            pack_format_number     : pack_format_number,
            issue_tracker_url      : issue_tracker_url,
            logo_file_name         : logo_file_name
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

jar.enabled = false

build {
    dependsOn("shadowJar")
}

java {
    withJavadocJar()
    withSourcesJar()
}

shadowJar {
    filesMatching("*.mixin.json") {
        expand "refmap_target": "${mod_id}."
    }
    
    setArchiveClassifier('')
    configurations = [project.configurations.shadow]
    from sourceSets.main.allJava
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifacts = [shadowJar, sourcesJar, javadocJar]

            pom {
                name = project.name
                description = 'A Modding Library'
                url = 'https://github.com/ByteSnek/SnakerLib'

                scm {
                    url = 'https://github.com/ByteSnek/SnakerLib'
                    connection = 'scm:git:git://github.com/ByteSnek/SnakerLib.git'
                    developerConnection = 'scm:git:git@github.com:ByteSnek/SnakerLib.git'
                }

                licenses {
                    license {
                        name = 'MIT'
                        url = 'https://github.com/ByteSnek/SnakerLib/LICENSE'
                    }
                }
            }
        }
    }

    repositories {
        maven {
            def mavenPass = System.getenv("MVN_PASS")
            def notify = true;

            project.gradle.startParameter.taskNames.forEach(task -> {
                if (task.contains("publish")) {
                    if (notify) {
                        notify = false;
                        if (mavenPass == null) {
                            println("\u001b[38;5;208No maven password found on the current system\u001b[38;5;250")
                        } else {
                            println("\u001b[38;5;200Using maven password: " + mavenPass + "\u001b[38;5;250")
                        }
                    }
                }
            })

            url "https://s01.oss.sonatype.org/content/repositories/releases"

            credentials {
                username 'snaker'
                password mavenPass
            }
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}