plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'net.neoforged.gradle' version '[6.0.18,6.2)'
    id 'org.spongepowered.mixin' version '0.7.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

version = minecraft_version + '-' + mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: mapping_channel, version: mapping_version

    copyIdeResources = true
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        configureEach {
            workingDirectory project.file("run/${it.name}")

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

sourceSets.main {
    ext.refMap = mixinRefmap
}

configurations {
    shadow
    implementation.extendsFrom shadow
}

repositories {
    mavenCentral()
    mavenLocal()
    maven { url "https://cursemaven.com" }
    maven { url 'https://jitpack.io' }
}

dependencies {
    minecraft "net.neoforged:forge:${minecraft_version}-${neo_version}"

    shadow "com.github.ByteSnek:Hiss:${hiss_version}"

    runtimeOnly fg.deobf("curse.maven:the-one-probe-245211:4629624")

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

reobf {
    shadowJar {}
    jar {
        enabled = false
    }
}

mixin {
    add sourceSets.main, mixinRefmap
    config mixinConfig
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description,
            pack_format_number     : pack_format_number,
            logo_file_name         : mod_id,
            issue_tracker_url      : issue_tracker_url
    ]
    inputs.properties replaceProperties
    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

def commonManifest = {
    attributes 'Specification-Title': mod_name
    attributes 'Specification-Vendor': mod_authors
    attributes 'Specification-Version': mod_version
    attributes 'Implementation-Title': mod_name
    attributes 'Implementation-Version': mod_version
    attributes 'Implementation-Vendor': mod_authors
    attributes 'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    attributes 'TweakClass': mixinTweaker
    attributes 'MixinConfigs': mixinConfig
    attributes 'FMLCorePluginContainsFMLMod': 'true'
}

jar.enabled = false

java {
    withJavadocJar()
    withSourcesJar()
}

shadowJar {
    finalizedBy 'reobfShadowJar'
    setArchiveClassifier('')
    manifest commonManifest

    configurations = [project.configurations.shadow]

    from sourceSets.main.allJava
}

tasks.register('renameHashedSounds', JavaExec) {
    mainClass = "bytesnek.snakerlib.resources.HashedSoundsRemapper"
    group = "snakerlib"
    classpath sourceSets.main.runtimeClasspath
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifacts = [shadowJar, sourcesJar, javadocJar]

            pom {
                name = project.name
                description = 'A Modding Library'
                url = 'https://github.com/ByteSnek/SnakerLib'

                scm {
                    url = 'https://github.com/ByteSnek/SnakerLib'
                    connection = 'scm:git:git://github.com/ByteSnek/SnakerLib.git'
                    developerConnection = 'scm:git:git@github.com:ByteSnek/SnakerLib.git'
                }

                licenses {
                    license {
                        name = 'MIT'
                        url = 'https://github.com/ByteSnek/SnakerLib/LICENSE'
                    }
                }
            }
        }
    }
    repositories {
        maven {
            def mavenPass = System.getenv("MVN_PASS")

            if (mavenPass == null) {
                println("No maven password found on the current system")
            } else {
                println("Using maven password: " + mavenPass)
            }

            url "https://s01.oss.sonatype.org/content/repositories/releases"

            credentials {
                username 'snaker'
                password mavenPass
            }
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.deprecation(false)
    options.warnings(false)
}